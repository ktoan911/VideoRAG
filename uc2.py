def find_scenes_by_person(person_name: str, semantic_query: str, db: list, top_k: int = 1):
    """
    T√¨m ki·∫øm c·∫£nh c·ªßa m·ªôt nh√¢n v·∫≠t c·ª• th·ªÉ n√≥i v·ªÅ m·ªôt ch·ªß ƒë·ªÅ c·ª• th·ªÉ.
    """
    print(f"\nüîé T√¨m c·∫£nh c·ªßa '{person_name}' n√≥i v·ªÅ '{semantic_query}'")
    
    # 1. L·ªçc ra c√°c c·∫£nh c√≥ s·ª± xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t
    # Vi·ªác nh·∫≠n d·∫°ng 'persons_in_scene' ƒë∆∞·ª£c th·ª±c hi·ªán ·ªü b∆∞·ªõc ti·ªÅn x·ª≠ l√Ω
    # b·∫±ng c√°c th∆∞ vi·ªán nh∆∞ deepface (khu√¥n m·∫∑t) v√† pyannote.audio (gi·ªçng n√≥i)
    filtered_scenes = [
        scene for scene in db if person_name in scene["persons_in_scene"]
    ]
    
    if not filtered_scenes:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y c·∫£nh n√†o c√≥ s·ª± xu·∫•t hi·ªán c·ªßa '{person_name}'.")
        return

    print(f"‚ÑπÔ∏è ƒê√£ t√¨m th·∫•y {len(filtered_scenes)} c·∫£nh c√≥ s·ª± xu·∫•t hi·ªán c·ªßa '{person_name}'. B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ng·ªØ nghƒ©a...")
    
    # 2. Th·ª±c hi·ªán t√¨m ki·∫øm ng·ªØ nghƒ©a tr√™n c√°c c·∫£nh ƒë√£ l·ªçc
    query_embedding = model.encode(semantic_query, convert_to_tensor=True)
    
    # L·∫•y vector vƒÉn b·∫£n t·ª´ c√°c c·∫£nh ƒë√£ l·ªçc
    scene_embeddings = torch.tensor([scene["text_embedding"] for scene in filtered_scenes])
    
    # T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng
    cosine_scores = util.cos_sim(query_embedding, scene_embeddings)[0]
    
    # L·∫•y k·∫øt qu·∫£ t·ªët nh·∫•t
    top_results = torch.topk(cosine_scores, k=min(top_k, len(filtered_scenes)))
    
    print("‚úÖ K·∫øt qu·∫£ t√¨m ki·∫øm:")
    for score, idx in zip(top_results[0], top_results[1]):
        scene = filtered_scenes[idx]
        print(f"  - Video: {scene['video_id']}, C·∫£nh: {scene['scene_id']} (Score: {score:.4f})")
        print(f"    Timestamp: {scene['timestamp'][0]}s - {scene['timestamp'][1]}s")
        print(f"    Transcript li√™n quan: {scene['transcript']}")

# --- V√≠ d·ª• th·ª±c thi ---
# Gi·∫£ l·∫≠p c√°c text_embedding
for scene in metadata_db:
    scene["text_embedding"] = model.encode(scene["blended_text"])

person_query = "Tanaka Ken"
topic_query = "k·ª∑ ni·ªám th·ªùi th∆° ·∫•u"
find_scenes_by_person(person_query, topic_query, metadata_db)