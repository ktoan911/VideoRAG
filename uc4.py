from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

def sparse_search(query: str, db: list):
    """M√¥ ph·ªèng t√¨m ki·∫øm t·ª´ kh√≥a (BM25/TF-IDF)."""
    documents = [scene["blended_text"] for scene in db]
    vectorizer = TfidfVectorizer().fit(documents)
    query_vec = vectorizer.transform([query])
    doc_vecs = vectorizer.transform(documents)
    scores = linear_kernel(query_vec, doc_vecs).flatten()
    # Tr·∫£ v·ªÅ (ch·ªâ s·ªë, ƒëi·ªÉm) ƒë√£ s·∫Øp x·∫øp
    return sorted(enumerate(scores), key=lambda x: x[1], reverse=True)

def dense_search(query: str, db: list):
    """T√¨m ki·∫øm vector ng·ªØ nghƒ©a."""
    query_embedding = model.encode(query, convert_to_tensor=True)
    scene_embeddings = torch.tensor([scene["text_embedding"] for scene in db])
    scores = util.cos_sim(query_embedding, scene_embeddings)[0].tolist()
    # Tr·∫£ v·ªÅ (ch·ªâ s·ªë, ƒëi·ªÉm) ƒë√£ s·∫Øp x·∫øp
    return sorted(enumerate(scores), key=lambda x: x[1], reverse=True)

def hybrid_search(query: str, db: list, top_k: int = 1):
    """
    K·∫øt h·ª£p k·∫øt qu·∫£ t·ª´ sparse v√† dense search ƒë·ªÉ ki·ªÉm ch·ª©ng th√¥ng tin.
    """
    print(f"\nüîé T√¨m ki·∫øm h·ªón h·ª£p cho: '{query}'")
    
    # 1. Th·ª±c hi·ªán c·∫£ hai lo·∫°i t√¨m ki·∫øm
    sparse_results = sparse_search(query, db)
    dense_results = dense_search(query, db)
    
    # 2. T·ªïng h·ª£p k·∫øt qu·∫£ (Reciprocal Rank Fusion - RRF)
    # ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n ƒë·ªÉ t·ªïng h·ª£p: g√°n ƒëi·ªÉm d·ª±a tr√™n th·ª© h·∫°ng
    rrf_scores = {}
    k = 60  # H·∫±ng s·ªë l√†m m·ªãn
    
    for rank, (doc_idx, _) in enumerate(sparse_results[:20]):
        if doc_idx not in rrf_scores:
            rrf_scores[doc_idx] = 0
        rrf_scores[doc_idx] += 1 / (k + rank)
        
    for rank, (doc_idx, _) in enumerate(dense_results[:20]):
        if doc_idx not in rrf_scores:
            rrf_scores[doc_idx] = 0
        rrf_scores[doc_idx] += 1 / (k + rank)
        
    # S·∫Øp x·∫øp k·∫øt qu·∫£ cu·ªëi c√πng
    final_results = sorted(rrf_scores.items(), key=lambda item: item[1], reverse=True)
    
    print("‚úÖ K·∫øt qu·∫£ ki·ªÉm ch·ª©ng th√¥ng tin:")
    for doc_idx, score in final_results[:top_k]:
        scene = db[doc_idx]
        print(f"  - Video: {scene['video_id']}, C·∫£nh: {scene['scene_id']} (Score RRF: {score:.4f})")
        print(f"    Timestamp: {scene['timestamp'][0]}s - {scene['timestamp'][1]}s")
        print(f"    B·∫£n ghi tho·∫°i g·ªëc: {scene['transcript']}")

# --- V√≠ d·ª• th·ª±c thi ---
metadata_db[2]['transcript'] = "B·ªô tr∆∞·ªüng X: V·ªÅ ch√≠nh s√°ch nh·∫≠p c∆∞, ch√∫ng ta ph·∫£i c√¢n b·∫±ng gi·ªØa an ninh v√† ph√°t tri·ªÉn kinh t·∫ø."
metadata_db[2]['blended_text'] = "Trong h·ªçp b√°o ng√†y 15/3/2024, b·ªô tr∆∞·ªüng X ƒë√£ ph√°t bi·ªÉu v·ªÅ ch√≠nh s√°ch nh·∫≠p c∆∞. √îng cho r·∫±ng c·∫ßn c√¢n b·∫±ng gi·ªØa an ninh v√† kinh t·∫ø."
metadata_db[2]['text_embedding'] = model.encode(metadata_db[2]['blended_text'])

fact_check_query = "b·ªô tr∆∞·ªüng X ƒë√£ n√≥i g√¨ v·ªÅ ch√≠nh s√°ch nh·∫≠p c∆∞ ng√†y 15/3/2024?"
hybrid_search(fact_check_query, metadata_db)